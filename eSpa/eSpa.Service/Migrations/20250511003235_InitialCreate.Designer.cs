// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eSpa.Service.Database;

#nullable disable

namespace eSpa.Service.Migrations
{
    [DbContext(typeof(IB200069Context))]
    [Migration("20250511003235_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eSpa.Service.Database.Favorit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsFavorit")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Favorit", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Kategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Kategorija", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Komentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<bool?>("Preporuka")
                        .HasColumnType("bit");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Komentar", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DatumRegistracije")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBlokiran")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsZaposlenik")
                        .HasColumnType("bit");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SlikaId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SlikaId");

                    b.ToTable("Korisnik", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.KorisnikUloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DatumDodele")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisnikUloga", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Novost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AutorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Novost", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.NovostInterakcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("NovostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("NovostId");

                    b.ToTable("NovostInterakcija", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.NovostKomentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("NovostId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("NovostId");

                    b.ToTable("NovostKomentar", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Ocjena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena1")
                        .HasColumnType("int");

                    b.Property<int?>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Ocjena", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPlaceno")
                        .HasColumnType("bit");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusRezervacijeId")
                        .HasColumnType("int");

                    b.Property<int?>("TerminId")
                        .HasColumnType("int");

                    b.Property<int?>("UslugaId")
                        .HasColumnType("int");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("StatusRezervacijeId");

                    b.HasIndex("TerminId");

                    b.HasIndex("UslugaId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Rezervacija", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.SlikaProfila", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DatumPostavljanja")
                        .HasColumnType("datetime");

                    b.Property<string>("Naziv")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Tip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SlikaProfila", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.StatusRezervacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("StatusRezervacije", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Termin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<TimeSpan>("Kraj")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Pocetak")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Termin", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Uloga", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Trajanje")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KategorijaId");

                    b.ToTable("Usluga", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Zaposlenik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Biografija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumZaposlenja")
                        .HasColumnType("datetime");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SlikaId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Struka")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Zaposlenik", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.ZaposlenikRecenzija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("ZaposlenikRecenzija", (string)null);
                });

            modelBuilder.Entity("eSpa.Service.Database.Favorit", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Favorits")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Favorit__Korisni__37A5467C");

                    b.HasOne("eSpa.Service.Database.Usluga", "Usluga")
                        .WithMany("Favorits")
                        .HasForeignKey("UslugaId")
                        .HasConstraintName("FK__Favorit__UslugaI__38996AB5");

                    b.Navigation("Korisnik");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("eSpa.Service.Database.Komentar", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Komentars")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Komentar__Korisn__3B75D760");

                    b.HasOne("eSpa.Service.Database.Usluga", "Usluga")
                        .WithMany("Komentars")
                        .HasForeignKey("UslugaId")
                        .HasConstraintName("FK__Komentar__Usluga__3C69FB99");

                    b.Navigation("Korisnik");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("eSpa.Service.Database.Korisnik", b =>
                {
                    b.HasOne("eSpa.Service.Database.SlikaProfila", "Slika")
                        .WithMany("Korisniks")
                        .HasForeignKey("SlikaId")
                        .HasConstraintName("FK__Korisnik__SlikaI__2A4B4B5E");

                    b.Navigation("Slika");
                });

            modelBuilder.Entity("eSpa.Service.Database.KorisnikUloga", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__KorisnikU__Koris__49C3F6B7");

                    b.HasOne("eSpa.Service.Database.Uloga", "Uloga")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("FK__KorisnikU__Uloga__4AB81AF0");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eSpa.Service.Database.Novost", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Autor")
                        .WithMany("Novosts")
                        .HasForeignKey("AutorId")
                        .HasConstraintName("FK__Novost__AutorId__4D94879B");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("eSpa.Service.Database.NovostInterakcija", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("NovostInterakcijas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__NovostInt__Koris__5165187F");

                    b.HasOne("eSpa.Service.Database.Novost", "Novost")
                        .WithMany("NovostInterakcijas")
                        .HasForeignKey("NovostId")
                        .HasConstraintName("FK__NovostInt__Novos__5070F446");

                    b.Navigation("Korisnik");

                    b.Navigation("Novost");
                });

            modelBuilder.Entity("eSpa.Service.Database.NovostKomentar", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("NovostKomentars")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__NovostKom__Koris__5535A963");

                    b.HasOne("eSpa.Service.Database.Novost", "Novost")
                        .WithMany("NovostKomentars")
                        .HasForeignKey("NovostId")
                        .HasConstraintName("FK__NovostKom__Novos__5441852A");

                    b.Navigation("Korisnik");

                    b.Navigation("Novost");
                });

            modelBuilder.Entity("eSpa.Service.Database.Ocjena", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Ocjenas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Ocjena__Korisnik__3F466844");

                    b.HasOne("eSpa.Service.Database.Usluga", "Usluga")
                        .WithMany("Ocjenas")
                        .HasForeignKey("UslugaId")
                        .HasConstraintName("FK__Ocjena__UslugaId__403A8C7D");

                    b.Navigation("Korisnik");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("eSpa.Service.Database.Rezervacija", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Rezervaci__Koris__4316F928");

                    b.HasOne("eSpa.Service.Database.StatusRezervacije", "StatusRezervacije")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("StatusRezervacijeId")
                        .HasConstraintName("FK__Rezervaci__Statu__45F365D3");

                    b.HasOne("eSpa.Service.Database.Termin", "Termin")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("TerminId")
                        .HasConstraintName("FK__Rezervaci__Termi__44FF419A");

                    b.HasOne("eSpa.Service.Database.Usluga", "Usluga")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("UslugaId")
                        .HasConstraintName("FK__Rezervaci__Uslug__440B1D61");

                    b.HasOne("eSpa.Service.Database.Zaposlenik", "Zaposlenik")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("ZaposlenikId")
                        .HasConstraintName("FK__Rezervaci__Zapos__46E78A0C");

                    b.Navigation("Korisnik");

                    b.Navigation("StatusRezervacije");

                    b.Navigation("Termin");

                    b.Navigation("Usluga");

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("eSpa.Service.Database.Usluga", b =>
                {
                    b.HasOne("eSpa.Service.Database.Kategorija", "Kategorija")
                        .WithMany("Uslugas")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK__Usluga__Kategori__34C8D9D1");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("eSpa.Service.Database.Zaposlenik", b =>
                {
                    b.HasOne("eSpa.Service.Database.Kategorija", "Kategorija")
                        .WithMany("Zaposleniks")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("FK__Zaposleni__Kateg__2E1BDC42");

                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("Zaposleniks")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Zaposleni__Koris__2D27B809");

                    b.Navigation("Kategorija");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eSpa.Service.Database.ZaposlenikRecenzija", b =>
                {
                    b.HasOne("eSpa.Service.Database.Korisnik", "Korisnik")
                        .WithMany("ZaposlenikRecenzijas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Zaposleni__Koris__59063A47");

                    b.HasOne("eSpa.Service.Database.Zaposlenik", "Zaposlenik")
                        .WithMany("ZaposlenikRecenzijas")
                        .HasForeignKey("ZaposlenikId")
                        .HasConstraintName("FK__Zaposleni__Zapos__5812160E");

                    b.Navigation("Korisnik");

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("eSpa.Service.Database.Kategorija", b =>
                {
                    b.Navigation("Uslugas");

                    b.Navigation("Zaposleniks");
                });

            modelBuilder.Entity("eSpa.Service.Database.Korisnik", b =>
                {
                    b.Navigation("Favorits");

                    b.Navigation("Komentars");

                    b.Navigation("KorisnikUlogas");

                    b.Navigation("NovostInterakcijas");

                    b.Navigation("NovostKomentars");

                    b.Navigation("Novosts");

                    b.Navigation("Ocjenas");

                    b.Navigation("Rezervacijas");

                    b.Navigation("ZaposlenikRecenzijas");

                    b.Navigation("Zaposleniks");
                });

            modelBuilder.Entity("eSpa.Service.Database.Novost", b =>
                {
                    b.Navigation("NovostInterakcijas");

                    b.Navigation("NovostKomentars");
                });

            modelBuilder.Entity("eSpa.Service.Database.SlikaProfila", b =>
                {
                    b.Navigation("Korisniks");
                });

            modelBuilder.Entity("eSpa.Service.Database.StatusRezervacije", b =>
                {
                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("eSpa.Service.Database.Termin", b =>
                {
                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("eSpa.Service.Database.Uloga", b =>
                {
                    b.Navigation("KorisnikUlogas");
                });

            modelBuilder.Entity("eSpa.Service.Database.Usluga", b =>
                {
                    b.Navigation("Favorits");

                    b.Navigation("Komentars");

                    b.Navigation("Ocjenas");

                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("eSpa.Service.Database.Zaposlenik", b =>
                {
                    b.Navigation("Rezervacijas");

                    b.Navigation("ZaposlenikRecenzijas");
                });
#pragma warning restore 612, 618
        }
    }
}
